name: Weekly Performance

on:
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      name:
        description: "Manual trigger"
  schedule:
    - cron: '12 13 * * 0'

permissions:
  contents: write

jobs:
  performance:
    name: Performance
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install CMake and prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl python3-pip valgrind
          python3 -m pip install --upgrade pip
          python3 -m pip install msparser

          # CMake 3.31.8
          CMAKE_VER=3.31.8
          curl -L "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-linux-x86_64.tar.gz" -o cmake-${CMAKE_VER}.tgz
          sudo tar -C /opt -xzf cmake-${CMAKE_VER}.tgz
          echo "/opt/cmake-${CMAKE_VER}-linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Run tests
        shell: bash
        run: |
          ./test/memory/memory_test.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            build/complete_profile.csv
            build/core_profile.csv
            build/stack.csv
            build/profiles_bss.csv
            build/profiles_data.csv
            build/profiles_text.csv
          if-no-files-found: error

  analyze-metrics:
    name: Analyze Metrics
    runs-on: ubuntu-24.04
    needs: performance

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: memory/performance

      - name: Install Python and prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install matplotlib

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: performance-results
          path: results

      - name: List files
        shell: bash
        run: |
          ls -l results

      - name: Save results into memory
        shell: bash
        run: |
          set -euxo pipefail

          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"

          BR="memory/performance" # Use this branch to store performance results
          # git fetch origin "${BR}" || true
          # git checkout -B "${BR}"

          python3 ci/metrics/save_results.py \
            --input results/complete_profile.csv \
            --output ci/metrics/complete_profile/complete_profile_timeseries.csv

          git status
          git add ci/metrics/complete_profile/complete_profile_timeseries.csv
          git diff --cached --quiet || git commit -m "metrics: append run ${GITHUB_RUN_NUMBER} (${GITHUB_SHA::8})"
          git push origin "${BR}"

      - name: Generate plots
        shell: bash
        run: |
          set -euxo pipefail
          python3 - <<'PY'
          import csv
          from pathlib import Path
          import matplotlib.pyplot as plt

          ts_csv = Path("ci/metrics/complete_profile/complete_profile_timeseries.csv")
          out_png = Path("build/complete_profile_last30.png")
          out_png.parent.mkdir(parents=True, exist_ok=True)

          if not ts_csv.exists():
              raise SystemExit("time-series CSV not found")

          rows = []
          with ts_csv.open(newline="") as fh:
              reader = csv.DictReader(fh)
              header = reader.fieldnames or []
              for r in reader:
                  rows.append(r)

          if not rows:
              raise SystemExit("No rows in time-series CSV")

          rows = rows[-30:]  # last 30 runs

          # Choose numeric columns (skip date, run, sha)
          skip = {"date","run","sha"}
          cols = [h for h in header if h not in skip]

          x = range(1, len(rows)+1)
          dates = [r["date"] for r in rows]

          plt.figure()
          for key in cols:
              try:
                  ys = [int(r.get(key,0)) for r in rows]
              except Exception:
                  continue
              plt.plot(x, ys, label=key)

          plt.title("Complete Profile")
          plt.xlabel("Date")
          plt.ylabel("Bytes")
          step = max(1, len(dates)//8)
          shown = list(range(0, len(dates), step))
          plt.xticks([i+1 for i in shown], [dates[i] for i in shown], rotation=45, ha="right")

          plt.legend()
          plt.tight_layout()
          plt.savefig(out_png)
          print(f"Wrote {out_png}")
          PY

      - name: Add summary
        if: always()
        shell: bash
        run: |
          echo "## Complete Profile (last 30 runs)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "![Complete Profile](./build/complete_profile_last30.png)" >> "$GITHUB_STEP_SUMMARY"
