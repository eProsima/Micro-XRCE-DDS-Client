name: Weekly Performance

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Manual trigger"
  schedule:
    - cron: '12 13 * * 0'

permissions:
  contents: write

jobs:
  performance:
    name: Performance
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Install CMake and prerequisites
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl python3-pip valgrind
          python3 -m pip install --upgrade pip
          python3 -m pip install msparser matplotlib

          # CMake 3.31.8
          CMAKE_VER=3.31.8
          curl -L "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-linux-x86_64.tar.gz" -o cmake-${CMAKE_VER}.tgz
          sudo tar -C /opt -xzf cmake-${CMAKE_VER}.tgz
          echo "/opt/cmake-${CMAKE_VER}-linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Run tests
        shell: bash
        run: |
          ./test/memory/memory_test.sh

      - name: Save results into memory
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ci/metrics/complete_profile/runs

          stamp="$(date -u +%Y%m%dT%H%M%SZ)_${GITHUB_RUN_NUMBER}_${GITHUB_SHA::8}"
          cp build/complete_profile.csv "ci/metrics/complete_profile/runs/${stamp}.csv"

          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"

          BR="memory/performance" # Use this branch to store performance results
          git fetch origin "${BR}" || true
          git checkout -B "${BR}"

          git add ci/metrics/complete_profile/runs/
          git diff --cached --quiet || git commit -m "metrics: complete_profile run ${GITHUB_RUN_NUMBER} (${GITHUB_SHA::8})"
          git push -f origin "${BR}"

      - name: Generate plots
        shell: bash
        run: |
          set -euxo pipefail
          python3 - <<'PY'
          import csv
          from pathlib import Path
          import matplotlib.pyplot as plt

          runs_dir = Path("ci/metrics/complete_profile/runs")
          out_png  = Path("build/complete_profile_last30.png")
          out_png.parent.mkdir(parents=True, exist_ok=True)

          files = sorted(runs_dir.glob("*.csv"))[-30:]  # last 30 by filename (timestamp prefix)
          if not files:
              raise SystemExit("No historical CSVs found")

          # Dict of series per column
          series = {}

          for f in files:
              with f.open(newline="") as fh:
                  reader = csv.DictReader(fh)
                  row = next(reader, None)
                  if row is None:
                      continue
                  # Initialize keys on first file
                  if not series:
                      for key in row.keys():
                          series[key] = []
                  # Append values
                  for key in series:
                      val = row.get(key)
                      try:
                          series[key].append(int(val))
                      except Exception:
                          series[key].append(0)

          if not any(series.values()):
              raise SystemExit("No numeric values found")

          x = range(1, len(files)+1)
          plt.figure()
          for key, values in series.items():
              plt.plot(x, values, label=key)

          plt.title("Complete Profile")
          plt.xlabel("Run (old â†’ new)")
          plt.ylabel("Bytes")
          plt.legend()
          plt.tight_layout()
          plt.savefig(out_png)
          print(f"Wrote {out_png}")
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            build/complete_profile.csv
            build/complete_profile_last30.png
          if-no-files-found: warn

      - name: Add summary
        if: always()
        shell: bash
        run: |
          echo "## Complete Profile (last 30 runs)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "![Complete Profile](./build/complete_profile_last30.png)" >> "$GITHUB_STEP_SUMMARY"
